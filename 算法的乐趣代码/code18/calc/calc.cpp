// calc.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "BigInt.h"
#include "Prime.h"
#include "Windows.h"
#include <iostream>
#include <string>
#include <cassert>
#include <time.h>
#include "GcdLcm.h"
#include "RsaLib.h"


/*
class CBigInt
{

    //大数在0x100000000进制下的数字位数  
    unsigned m_nLength;  
    //用数组记录大数在0x100000000进制下每一位的值
    unsigned long m_ulValue[MAX_BI_LEN]; 

}*/

const int COUNT = 50;
const char *mA[COUNT] = 
{
"18253883029160872439",
"5343569500544477999",
"1127838984855518627",
"1027544455602931463",
"13103838683018073607",
"7353854678087893219",
"17262501599878869707",
"3341858759817694019",
"11051526037459968787",
"12306227691705761059",
"14081296769897888263",
"18428918974297410179",
"2581733833744601311",
"10532345536629346667",
"8462436059895171503",
"10610538999451539947",
"16658474270668680799",
"7962978557704683979",
"11457745675944502043",
"13429409974736664899",
"4058909522923781627",
"1584941020960804931",
"13843558674552979763",
"3571528532252311291",
"10757669186252761567",
"947530570912414987",
"4159815318965894183",
"16801866768126081199",
"15076365941634911983",
"3592980775083990127",
"9022976121761088247",
"14167907214942560243",
"1444212295095728947",
"12704324810636185439",
"10339864136274805543",
"16440666838388617343",
"1779723760479390107",
"16371217586709347903",
"1879184694979355807",
"10859359972728550631",
"341151034731590399",
"15644963768056607227",
"8258612740685740339",
"17926158905160936179",
"8340123697839893027",
"8895747603737090419",
"14999881576560896027",
"15255005074376815331",
"15030852596588125151",
"15535363101685059739"
};

const char *mB[COUNT] = 
{
"9865767342797550127",
"11621040640975855343",
"17168317328777692351",
"14353123978655104099",
"16374234612440630911",
"7233021460164543299",
"151115040500277991",
"13165255931708578703",
"17064805432031988139",
"6627855482814895471",
"18141882845976647591",
"944218042191593959",
"12727395219231669463",
"3972214462665862363",
"16742784306474946547",
"1867385269507903331",
"2267032990980009871",
"9015809909980550399",
"18118195680072099127",
"12392797517365299959",
"12002812202666474183",
"8012080478231386463",
"626740649912995231",
"12558854875125560647",
"4594984310052255839",
"8201297089531365947",
"13150664742563784607",
"8810880512481743603",
"12287129037848633191",
"12941160008521273819",
"16263281384724558011",
"10887623532424103503",
"13869457869714682439",
"3240382919184100211",
"13495727903814888947",
"3870452920587036211",
"6466054787223920507",
"8421287428914322843",
"7242497938796352119",
"13466487146337814591",
"1154192868426309083",
"12957077052821249143",
"3812992493629877903",
"12234272214723627179",
"5770238458265247019",
"2184937258250460563",
"12279730456614060607",
"11871741721346345879",
"16327849241487233011",
"7062933659869520779"
};

const char *mN[COUNT] = 
{
"50595025046119209148426499517415200047",
"242326248862425161673071881048114610887",
"169168672034778417695754564443635110223",
"97463209812715343245396768131078556487",
"7313097571680119735215036010924112683",
"278238143851160798211863517331506486151",
"29237001385587894584303231710393679923",
"145387174401260802882037191384362709751",
"230189677209846333114893365991114286787",
"127527165119651095009117840779145285939",
"36298341334952571586108368977568079703",
"312789137821503707570897877713790186359",
"150663883073832505406083298763397327663",
"228980546619746466769998871769666722787",
"31790741691931226870998891228034770171",
"275288042985278169857127632292250679411",
"106830785324586746133908418942656503531",
"71616961002400609150038921706290840899",
"144710017170123772220062643404811071003",
"112292598993068854151786407549302479759",
"165668876721870651020388453593663169431",
"171329947444994338124126477780658966647",
"126921571325271091516407124287389459291",
"336492584272988681651252621983404720031",
"21509716622384816259323968094690803627",
"198651167426633555206893195037562826311",
"280439047992043166513751303430198196311",
"387750776826049490516626385521117979",
"94161378473748492780167265848987133523",
"162532057877785580797360691836548827663",
"307841811247031409527823430902980319083",
"209979953783544682735931452673335129583",
"21488965155683094195226384418595689363",
"148428138284224557242429806063948840903",
"15903181689285058092875156012110342063",
"326970267932308090245044936565823826783",
"185926551733089208672403542529443425463",
"314262861162762112332986952667477638367",
"71221190787807497553677154727851912167",
"318580423047355663392521567222197005967",
"40138565526815158960336449725628565403",
"251026831653655238555257624291072299319",
"304811903887952245549056593128229452111",
"80232553851731255314469014116315057431",
"216003177093088403127257206000866476419",
"147433878403491070998628526493577136179",
"323189479215622425133281192807540723187",
"172823782209750546823411992797786041387",
"270977914175220167619295691830857715991",
"47780942434415592878046590021507017691"
};

const char *kA[COUNT] = 
{
"6A16C3C47A7C4F8439004D78E76A858EF81C5E92C5421B8601E2938484DC43BF",
"AD8C87041A0A6C52C15C300AEA2E6962131A01542406F99683DC6E786244A4AF",
"8C445E5CB8228EF80DDEC084E58E4F2A3100C97E3A34603E1A7893C6EEFED167",
"D3A2D540DDF485D86964F06E6192540C4626A74698185B644EEC6F9C30A60457",
"390A101AAAC4BAFC34D69C6049AA2B40C95C3706F3582DE466B21EAACD1462FF",
"322AD8268F607BECE9B6E000E83C7D4C9DF063729D94907CCDDC2F40D13A02F3",
"12F230783BE851C8C0E0AAF8BA32529C5E207B4A786687B0D6082A52E6CC8C07",
"2E3AEBE65A724922ADC2A144EE140904DBFADBEAC4ECB84CB3D0C8EE14C69C77",
"6DCA8D4CD7922C1AFAECF2926DA8C20AC00A7122AA5A0610E78491BA12F0692F",
"EFEC96964F0EDE3C8DA8D298C0F4E9AE8D7E311EA82CC620985C7232D4C0DF63",
"304CCA0C856CD2E0BA663556D82031B8977EE3D4A248CB8A8372AECCC5941933",
"9AA2B1C8AE9A90A0088AAC861E180FAAE4DE3E06C3C6BC5468B8D1E2D25C5663",
"424E83BCC63E55C4C13656708A1072CE05368DBA79B073F0BAC8FA02678EC0CF",
"B90ED9AADAF8DD62218A9E566E922926100A00923024604CB3BC5CAC6A66F58B",
"9ECAFF78438039D6782AFB824C8A9CA2DC68F8E60A30AAB43CCAA4A07162F717",
"49225A764FCADE70918210DEDF7A136CAE5A46E89642A65AAA2484001E1A0137",
"36D6602E14F0C9D6D54649C6FEE4F7C0BD9AD8DE93F494B03BA406E4FB22997F",
"E5A2F538C2AE0BB8CB64D4EE3174B9DA3E6236924054A6F4AF4292089DC0FA9B",
"6A80E21E0D7CD7B48A7AFED8EF7094B2DF086AEEC1FA26B4904EDFD829B6FACF",
"91C2C646452AFC42BBE247BE280A19849FBA50142024894ED6FC8916720635DB",
"E2A4590E630200646238ECA46A1490725D729DDE9230CBA8C2723C44B09CB51F",
"A4E88032FB904B90F85A6CBACA5CF96017A04DF0627C288E1A6629AAF6EC9E07",
"AE529EC877A462EA2C6A9CA8FFDEE0246EA231E0CF0CD8EA44ECAE805B18E463",
"57A0A8846AACD84472BCB5208ADA0D68B562E10C70261042DFC8AC7A42F8998F",
"AB865E2068669B68D412863684DE95DE32C4E5586F76AE1C25B41518741A4D3F",
"D37EE84CCEF8BA1ACDB226E4BD8075DA15E87EBA78CE82C8A2C4FED0F0A2657B",
"2AB8EC08700605504918EE46A626C4FAF2F2F266796C3DAEBCD0DDA20B288F5B",
"830E1212D4D2E07A7B2CFAC85D323F265A24EADA9CD60B1CDC3A8E5E09EC33BB",
"7BE83444036837C09760C256281CDEB48384CD4274CC983C4BB298CCB4A8F1AB",
"BEC8C9DA13EC99A03D207BC2237CCB2280C6D24415784424E9A47C8E546C14D3",
"68566B6809D20FE4D17E1F444E2C1D14B188EF108BEEBC5ACFD21E94779C530F",
"E634788C7A669ACC5D5242D6B0A0E9840EFE6936476A4EFAE40271247E8A84B3",
"82BCB90E62BEB4C651905EFE0596389EECDA462C883C115A63FEFA44D8FA16FB",
"942E4C0E5778E4327EAC634C8354E492F0904B1244F69F0ED30C17A6CA681267",
"B5A4A7B480140260451C8E3415D83DBAC9563E282C6AEB1678F2939236E26A07",
"D150F738A6D21B50CFA61246914A0A7AE22C2400B50C51A8F358D4DCECBEC1D7",
"A86622C2A964E264C8785D148FCCD2B42F3241D4DE386C8481E679F402F8AEDF",
"D22CA7107024E2E67E12E078CEDC48C22422DE2CFE060840660456107EA05A4B",
"141229DEE1A873047BA2AE40F1F66136C76E37BE3AE09B20D31EA950FEB8D8AB",
"E8B08A6E60904ADA76E08A32641063CE0A9C8294BAF4901A7D10FB04F544937B",
"FB76EE8ABEAEFF36707E4E126DEE7ABE898641E6BA64AB207FEA00D457AE3963",
"31889C1EB39850A8833EF9A202307B12427C319665C4AFBE29C8DB4AEA14534F",
"954C744CA81858D0BA94966CD05E48C88634F6DC50408AEEF69AB83225100E3F",
"D90026CCBB841EBC637CA6D2468C99B0F33855F8A686F05A1950E6BEEE60D8D3",
"47F0FD1A7AD2E6A8D6864B6EF1069CDA0B409338FE6AD08EC6A213D2AB6CBA67",
"5148007225D84B5E66B8A46C6860B93E2634755AC01A5C52BE06BA40208A54F3",
"FC2030AE43FE3E5627F4FF8CC2F2D88630A28DF2F7A0594CBC9A4A76ED90A8FF",
"ADF413D0B39ACD6886E40452C56A4472C78E76F28E68D37067589858DADE895F",
"871E06CA43305E36F3A21FFCBC9CA33C539419C08D72D89480600DA8C26E06E7",
"15505E8CAA4EA800B254C0EE823609E4780C5A480C0CA0C45D4C3804119C2A23"
};

const char *kB[] = 
{
"15DCD6D07186D2AAB59453C4F0266606C0508B2415E21E36EA8473767842E78B",
"C99809E85E406F3E590A6514C9D65536CDC4194E76F82EA456886B38C16AAA17",
"3046EAB0A9BE5804C12E566AD4D2EF2AF39AC42CB044A984D1F2CEAE0D5CB613",
"F0368824BE10EAEC8F967BCAACA0F71AD952080278766C4E14E44B44F48A9783",
"A12430C035709A9EF3DA35142ACA800E929CB74A6EF8C93E148408FC22AC6BF7",
"A2EC32A8F620381660AA2CDEFCC89D102B3A65D4C45AE532BA307EB661D49267",
"5BDE7074ECFCA27A0F2A7D7A16E03C542FEA2C9E29446DDEA16637EA9EE043CF",
"475C34244388D9BCF02E3B32509A05E80C3C5B84347A6356B7647D6247487E87",
"D5860FD8EDC460461D0471D0262C3256541AAE5E3900862AE3D4283AA12C51DF",
"5A783A1C7904E006883087A40776E0A85154AB72F2C6CD6C61BA30E02DF6DD2B",
"8A3282801A6EBA40789688C4623022CA25923B40E720967AB05CE82A68D85B5B",
"1E3025DC04264D4C2902E3CEDEFEBD26025E5E8AC24CCF36A75017D4F450DA9F",
"FA0E50AE773C85DAE3F8135AB05A85C8B3E08F3A325EC35C3774B81A4F2A36D3",
"5718177E562C47A8EE5AAE00850E5C0A22BA26DE2C56FDA206702B5633F68D7F",
"15785BD448A0429EC4F44464B1F65D4A5276D528A76492249936BF62F5A29EE7",
"2B50A754FDDC9FC05A2E19FA3584B30C86BC97C88D84F232219EE6B6484E26CB",
"127A367CE4A0EB600982A926C0EC0456A370EAC800C8137AC53C415E88AA3147",
"7C0885A0A8881DCAE154ECF803DC052AC55679A601D214CEDA8A481CF7B819AF",
"82FCD6D06EB62C5C1E2C770207543428957421E6D18228EC434244147370ECFB",
"D444E9FC04F6A03CF388DD0C34A0C5706B58FEA2D2985D1C51E25916BC582CA7",
"65A82063B14BC16C2E8D4AEF74A26425D584CE8E7A823E4D33299FC855EEA43",
"C0AE8F3CB5EA02A6309A57DE9B40F0945FFEF92681587974F44A099A6362F39B",
"1603BB413E2D494478E2CC8ED1E564A56BCD062D0F237EE87601C0A491CDC2B",
"8E729B745D20A49E9552DB56BFB0F18CA23A84CEFE286F9CB8D041C4F22E17BB",
"63A028276F05F10FEA86280EC8C17D64AA2802E653C2F624F8E194402A477B7",
"47D6855AF478550AE982A382FFD67AF6F8D4C7E21EBC42A63FACB1B6E9BA9047",
"EDEE258C6F6E2B0264940A7C1624086A6F0EC03E920A9EBC8FC4E2703B4EE94F",
"6D4A4434681449249340160AEC8E775A75ECF2888788CB021AE003DC68AC1113",
"69E68F1CFAE6724CD1CC3340A91629A0343CDBD0BACE888E39E6059ECBA0744F",
"A504DA80A392A9A6A0B05002BD0AEC18F498F1265E8E9A6AC6707AB85B90B12F",
"2204A446CD1AF9A67068CE4C35968870D9CC0D62468E5200B2F43A127CE6F78B",
"94405A22336666885DD8EA24779EB3DCEC122F58006EC03004582B622778F983",
"54BAB01E4CF8131CEB84AC5E8BD2AB9CE9605B0428C49720C71EBB7E93245A87",
"1212779EDAF23EA0A9EE8420E7A8542A8F0057A686A0D2C83076698C19E6AA37",
"FF986BB8E85C414A37B8A5EAFB5A3F5C754C9AF8643C17B052EE62F4F4C435E3",
"5366349663E0568E053ECAE0B9D273E6DC0CFC422B7092EE55625BE889E824EB",
"9B2A92F2C57808F2874E9CF08B46CE22F90237525800B956DE5C89C282B0E057",
"8C4881FCB264052CB1CEB1D431D405AC1B448FA46940F838F4460378C8F697BB",
"ACA2ACAE27E08CCCA4C6D50A0886C9BA2FDA2C3C8766FCD2DB18FF787F385BCF",
"5914D356C4C4AB848526F81E2016531AA978FB02B7CCE81258880A5E2D32F563",
"58B48616BE0A140CE1FE86B0F9C012D65A620D664E361600AB0C6792EDB0C09B",
"AE5E3F4646B0092AF13053D24F36228000DA5CD4FDD2A73AC31664F4DD840B3B",
"91CE5C365EDA02EE66B03ECCD118EC007B0ED5CA9DDEB40A81F62DE2068645D3",
"390F64CE6F6C0F882B07C9A50742822678E5450C48E5FC2EA5ACEAE27DE9CEB",
"BA92DCD46B44DAB0B06680A8034052FC68667E9407AC24462B6E95E002883363",
"BA10EF207CEA14622C0EFCFC8E2490CA27BCDA82E0801B3ADCD6E86286522593",
"9960D7A46FAABB9E2DA4C0BAD230746069303794890A596A32A4322C56E235AB",
"5B0E57A012BAAD562206838E0A3684DC800629E61B084E8C622E571C99E67927",
"2A2E3B24A16CB4B848A61A222674A204807A15783C40D898BDB2E1EC60140A93",
"3B362CD828B0A390D74400401A92D4A6CF36E54203346AF6A006B7DCCBF25E4F"
};

const char *kN[COUNT] = 
{
"22D803B4746CDCBE06D40AA8790E2D0820ACC65EF17CB800F06C4496DEBC516CCD3897C4D5BCCB5EF3888C6079CA66D299DE4ACA698AECB883FA7D945670479F",
"985A322E6D1A2376D8E27ACAC73CC41833FE51069C20997EB8ACE5C6F920A276F4C4776259424ED457300AFAD3A6D41858A6D24E7C82EA78E2E0D612B0A0CA87",
"3AF43028DD9C86509C88A0F0629E7DC838AA707E756EBD78416AA17E5B10C022EE943F62A6FCDF507CB24178D044739EB676CE869D5C719A40BC38DADE461B1B",
"E3BC292A8670FAD222E43CCE0398387A5B88B23E80307EBAC582D9C2EA2074BC3C828230A82CF1144CC0B2BABEF26ACC3E3A694EA05A6B0816667564DD945713",
"AB1C84FAF5F674D6140AA6B4690CA4A239EE7E9C2ED61F8E1C80B4600C8CFDD0CB247AB4BA78E866F35EC3F86CB25EF2A1C2DF429A50420AED785600FB24BA1B",
"3EFC4E86A5C436F2EE2A190435CE359C8D2AE1C0068CDC9462A874A64CDE661833F80B8AB264C82ECBDE9A04A474A7B05FC27DC22D90ABF6CB64AB6091648ADF",
"10F8AE3ECBB4F6E0B9E0139E1C3CF882977E965C1C12C6688742B1FC81BAE9E02A46411A71E87BB050F81A48CB782026B55AC15CEDE093B8FBBC454C32342017",
"ADA0AF4A91BC77D869EAAB065D7EE8BE95709FB232D834B6D37EE84CCEF8BA1ACDB226E4BD8075DA15E87EBA78CE82C8A2C4FED0F0A2657A1E989504EF62BCA3",
"A9EA3EA8E500AEBAA810A4681FC2C6283E682906B6F00AEAEC8A168CFBBE83442814EF068C0C19788794CBA2B39C581EB80E5C3CE3CCE30274E8DF84B9CA447B",
"90A68396B862A854EFC83C66B3D669DE16AA9E161076E9B6136EC01441BCB84097481AAC577E0AE6B9AE1D60C55C459C320A61C68CC05D0C7FFE12DA8150E923",
"7B6E68F4DA144C52F3AE014489B88B66B8D0678EE61AD68EC81EFDC8462A6BD4FC10586E4E529AD8C582F2D27DEEFC747B661FF63F3822CAB906CFE631CE99E3",
"205055CA25A8D3FA7A4A65EC924EE9EAF27CA2C427E60416039ADA143FC21D5CF5B4FB881B5C3230386EEA184AD0ED2403B679DAC5CA3C0AB6F832606F0CA587",
"658E102ECA8E5376B1C0E94C7C04A67E7C5EB10AC99876461B14E74AC19C89B6932C9710D3AECDD86286DB9E5FEC8828B30E2606FCB6657C30BA9B4EEAD2FD4B",
"E5B2C80AEB801D708D0A804832B084AECE548BBC0EE8040EAF3A404637D29C74DA10BFC8852858909C46DCD4676EC2B2176467AE9F2E9F205C82BBF82AAC02F7",
"3FD8FF369C829830DEE81E4619E4C8307F800FBE725460B0C7AADD56E2A000203AF6224218AA4BC4703049FE7956FDD0759443B6C104E3F85B8AC21236922693",
"C46E08C03C68DEB4DE9274EC1CD0CBA61A2AA360054A7842E1049B9AE580AB641B3A442C3396A276912C1CD48C6A10D0E7F82912BA3CEB887076634699F499CB",
"63AAF91E36E8AFB4BFEAFF723138D8C8340052D8D97CEA4A87BEF5C89D26DEC09816753AAF225A4C90661D0215466248BA2268A438548D565B1048A8AE6683FF",
"2B30BC10C4D27940D3684CE40E90B92EA27CA53C01603BB413E2D494478E2CC8ED1E564A56BCD062D0F237EE87601C0A491CDC288EB028F4BE90F2021324569F",
"92E0C502773A28B0FD6C19CAE928314A7F482F46F4FAC080DC5473A6B97C1CD07E222E1C476EB0D60522AB324704FAE2F06425A29FD2750ED3C203B2DB4C4DDB",
"26FA9260AB2EC53E24866052D7AC202AB25EDCB8D800969C0A5817F453A0B91A99A412509024F7B27B062D68F7C6EE98378CC9F052569B4045C4AA1A68B251EB",
"6A2A30688ED895EC6E66349A762E1ECCE57CC0AC8F58C5CA52124582A136E024E512434845961454549AA48296643274BD74F9AE31680908C714ED540A7ECE63",
"A28E6698F5121AE46A42967CF3062DEE4686C3AEDF08B476AB964D56FE9AF2D82C3061148148C94C5F5229DAF6AA31F6F46873401ED0AF78EE08D95E4D46041B",
"C6489E640F2AE9586E4C234A3CD829689C78ED00B58873EEB8DE76344AEA67B25C42A1787E583E9219983CD02C80AA5E09FC3DC887A6C62AD3268E1A58563433",
"B35AFBFC6CB62658ED709F261896A36E873E2FB82B9431E4D6C6FA829D64BA8244964EBC3CA88B38D43AC4A4E1B49EF6BF344C96BFB48A0ADA74DEA0CC7A22EF",
"1E107E02F9D04174D2C0B936728E80CE29C0C5D6F72404AEAC6EF5A2AD2E931467CA9980B6B8B6CC92A2EEE684A4A806BA5079A61BAE5D70EDEE624C03E29DCB",
"2E6087F6B02EF70EE18EE2261D8867146540FCF60610CCEA951A725A0EFC76CE40F0D9B0E2DE2CEE98BE63EC0BD682C2131A0822145454E2063898A066460B5F",
"38EED3C25C044E60E028811C3F1A2D20F8A03122499C8F32BEC847664FF6C13C96D0CA3806FA38A06B9A25C6F91C93DE983E4FB65230176493F4A336F9983EEB",
"3BD847683010621C57083E14F41EC4BE992802CED38813DC35062304016864FAECAC887A03E60E8CB59A6C9494A4E6868376D84213BEC97EB14848404538423B",
"FFF8F2CE3AD05202B6060B821B6217649672A0086A102C8EAA12C6BAA1F84200779CB6580BC4E9A2989CE722B8E2850AF8EC34667536506CF8AA56A4275821D7",
"AFEC0543156F1623E26A68E90C29E4EEBCAACC8AB14C522D662D46CF5628080B06A68E8DB6AD1082756BEC600CEB9B6B904934498CA18B48BBC64724C6ED4B7",
"A4B00494A95CBEDC390A39B0ECCC80E4888AF272C356B86CAFB48B327AF256646D54C3685330F10261BCE002E0AE79480474AA421312092AC87CE310957EA21F",
"702A9274975E74CEACDC5CD4DB761E78E8DA3CBEF2FC5C6EAE4C9C90E93846C24062D5A681169886D63A5F7E266ABC26A0669F42F59E943AD0DEAFF251F498E7",
"29B46030CF4098A4BDAEEC32C760AC605B76C218B204E40ACBDA3A506BA0BE248C60892CE44A284E58BE026E8B721C1676CC15680A1C50567D04D98C43961703",
"D51E3C0A9FD0BFB034B68D0490784D5A3B8E2738DE9AE444AF9234C21FE498401E34B32E751435F2F21E125EAFEEB0EEB76A47DAD3B6824A86646EAE28284FB7",
"F1140062476E077CB148CC6E0600E4D65C98BCF497207086B42E394C182E9E42FE9292CAEDCEB600FF14FE58ADA076C44FCC668CF6746DFCD612EE3E2F069B57",
"C67266D867C2FB0CD48A6F747E68AFFAF3D8C6A46B947C40C6283EE2539C23BCE61C2A32C0B6D2AC63DCC3F8B7EEBED040569F50789CC8F6DEEC31E61E62771F",
"7576C9602956C2987146CD2CC7788E0403D89F8ADF26FB50A1BE08AAC740B4C282C0910CBDACE98A061E34D887CC4C603D3EA3BAA57A5A9614E8A532CE7EC3B3",
"41EE899E6B9ED638DA407CC8DBA4E80C136A72F228EAF9DCF8FEC84A7F4C07F019548AA25FDCF8F43A043C169F9681D45EDC9E1EC498EE1ADB585D24B9DAE4BB",
"3C86C7AC16D05076A94A7026E38629D6E7FA14947E8286D4E8704550E854FE9CEA328DA01F4A4920B334AF8A9E6AA230A50C442A66E88D0EA8AAD894CC20508F",
"715C9534B798B2E6A560444E5EA082448CFEDAF8BA14166440CCDD42230E7AE01382AAF0918C989AB02804D0A6ECF65A3ECC7E882AE021E607C47502B2EA999B",
"A07C5E5680AEA33E7DE075349C9829B81F58CEEE6FB64362516297F2463AC686BD3EB050646A1B2E603A260EE21C88BA39560C08A8AE1BEEA586453E4B7AFD9F",
"6EEFD7CD6A49704F9BA0C90C0608B320CD28F8E8ACC3A4E14340550FC7C6C76BAFCE174D70822C2AECCE9E454C2FE1CEDD42CFA54F29A94EF3E68142E84F73F",
"D3347B2AAFC4AE080128EB50A7147D547CDCD320A6348544962C93E2290E9408B058EEBCC2907CA89EF4CDD29FF06D682D608DE2825CE29E08C4204CA734CE0B",
"75B23DEEF26879DEF4BEB40A3214C91C2868D084ED8AF1E4C6568A4AC438A6CA6182AA589BEE6148FEE8ED8A0DCCFAD428D0AAF4FDC8C676787616BA949682E3",
"C52E2A6859C41EAAB946D0709B6A5618A92A30E60E800ABA2AD03FD4512E21066C28334AC7586622DB506AC65F28227AB554A308A7FAB4D4F3640E64F3DA0DEB",
"8268029816AA53921E7AE7EE25BC96367AF02EA6238CB952F91621B43AD82C9C8E4489FA42CA4468544ADCDEB9BC2992AC72B3625E66EDCAACF661C05F9EDC77",
"3AF8834A3ACCED26A3CCCC24E97E483A5D0E470E995EDAC8AF42985A5712C5C8AF4A8946DE62D6B8E898E95AD0BCC43A4DEA9C3A9E1C5332E8806C0AD8923C53",
"A40CC48A797CF15060F07EB0955427526492F484407076A430A641CC86E8CCD6FBFCFCF60FA49116437E642A338C3E9045A0CAE64B425B3AA060A012AB5A6337",
"3DA22F72EE927DF833B00DECF1CAAEB62778AEF8525E2FCCD0042D4CBC5676006A98FB04FBF8AF5E6960B58034C4FE4C80A6DDB222E495260A968D069F2C0A53",
"3E966F34231EDE70A2C00508BFE2372E9B0A7662B2BA1CC8CC88F4EC28249BACE36C36F0296073EA83FC847813BC9388260E04E44638ED621300A4F87DC8447B"
};

typedef struct tagGetPutTest
{
    int dataSize;
    unsigned char data[256];
}GetPutTest;

const int GETPUT_COUNT = 5;
static GetPutTest gT[GETPUT_COUNT] = 
{
    {26, 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z' },
    {26, 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' },
    {12, 'a','b','c','d','e','f','g','h','i','j', '1', '2' },
    {11, 0, 0, 'a','b','c','d','e','f','g','h','i' },
    {12, 0, 0, 'a','b','c','d','e','f','g','h','i', 'j' }
};



void TestBitSet()
{
    CBigInt value = 0x7FFFFFFFFFFFFFFF;
    assert(value.GetTotalBits() == 63);
    assert(!value.TestBit(63));
    assert(value.TestBit(0));
    assert(value.TestBit(5));
    assert(value.TestBit(41));

    value = 0x0010000700000008;
    assert(value.TestBit(3));
    assert(!value.TestBit(2));
    assert(value.TestBit(32));
    assert(!value.TestBit(35));
    assert(value.GetTotalBits() == 53);
}

void TestModularPower()
{
    CBigInt N, A, B;
    CBigInt r1,r2,r3;

    N = 7;
    A = 3;
    B = 11;
    r1 = RsaTrans(N, A, B);
    assert(r1 == 2);
    r2 = ModularPower(N, A, B);
    assert(r1 == r2);
    r3 = MontgomeryModularPower(N, A, B);
    assert(r1 == r3);

    N = 5;
    A = 3;
    B = 7;

    r1 = RsaTrans(N, A, B);
    assert(r1 == 6);
    r2 = ModularPower(N, A, B);
    assert(r1 == r2);
    r3 = MontgomeryModularPower(N, A, B);
    assert(r1 == r3);

    N = 3;
    A = 5;
    B = 7;
    r1 = RsaTrans(N, A, B);
    assert(r1 == 5);
    r2 = ModularPower(N, A, B);
    assert(r1 == r2);
    r3 = MontgomeryModularPower(N, A, B);
    assert(r1 == r3);

    N = 7;
    A = 3;
    B = 5;
    r1 = RsaTrans(N, A, B);
    assert(r1 == 3);
    r2 = ModularPower(N, A, B);
    assert(r1 == r2);
    r3 = MontgomeryModularPower(N, A, B);
    assert(r1 == r3);

    for(int i = 0; i < COUNT; i++)
    {
        A.GetFromString(mA[i], 10);
        B.GetFromString(mB[i], 10);
        N.GetFromString(mN[i], 10);
        r1 = RsaTrans(A, B, N);
        r2 = ModularPower(A, B, N);
        assert(r1 == r2);
        r3 = MontgomeryModularPower(A, B, N);
        assert(r1 == r3);
    }
    for(int j = 0; j < COUNT; j++)
    {
        A.GetFromString(kA[j], 16);
        B.GetFromString(kB[j], 16);
        N.GetFromString(kN[j], 16);
        r1 = RsaTrans(A, B, N);
        r2 = ModularPower(A, B, N);
        assert(r1 == r2);
        r3 = MontgomeryModularPower(A, B, N);
        assert(r1 == r3);
    }
}

void TestSpeed1()
{
    CBigInt N, A, B, r;

    LARGE_INTEGER Frequency, Begin, End;
    ::QueryPerformanceFrequency(&Frequency);

    ::QueryPerformanceCounter(&Begin);
    for(int i = 0; i < COUNT; i++)
    {
        A.GetFromString(kA[i], 16);
        B.GetFromString(kB[i], 16);
        N.GetFromString(kN[i], 16);
        //A.GetFromString(mA[i], 10);
        //B.GetFromString(mB[i], 10);
        //N.GetFromString(mN[i], 10);
        r = RsaTrans(A, B, N);
    }
    ::QueryPerformanceCounter(&End);

    double timeSpan = double(End.QuadPart - Begin.QuadPart) / double(Frequency.QuadPart);
    std::cout << "RsaTrans speed(s) : " << timeSpan << std::endl;
}

void TestSpeed2()
{
    CBigInt N, A, B, r;

    LARGE_INTEGER Frequency, Begin, End;
    ::QueryPerformanceFrequency(&Frequency);

    ::QueryPerformanceCounter(&Begin);
    for(int i = 0; i < COUNT; i++)
    {
        A.GetFromString(kA[i], 16);
        B.GetFromString(kB[i], 16);
        N.GetFromString(kN[i], 16);
        //A.GetFromString(mA[i], 10);
        //B.GetFromString(mB[i], 10);
        //N.GetFromString(mN[i], 10);
        r = ModularPower(A, B, N);
    }
    ::QueryPerformanceCounter(&End);

    double timeSpan = double(End.QuadPart - Begin.QuadPart) / double(Frequency.QuadPart);
    std::cout << "ModularPower speed(s) : " << timeSpan << std::endl;
}

void TestSpeed3()
{
    CBigInt N, A, B, r;

    LARGE_INTEGER Frequency, Begin, End;
    ::QueryPerformanceFrequency(&Frequency);

    ::QueryPerformanceCounter(&Begin);
    for(int i = 0; i < COUNT; i++)
    {
        A.GetFromString(kA[i], 16);
        B.GetFromString(kB[i], 16);
        N.GetFromString(kN[i], 16);
        //A.GetFromString(mA[i], 10);
        //B.GetFromString(mB[i], 10);
        //N.GetFromString(mN[i], 10);
        r = MontgomeryModularPower(A, B, N);
    }
    ::QueryPerformanceCounter(&End);

    double timeSpan = double(End.QuadPart - Begin.QuadPart) / double(Frequency.QuadPart);
    std::cout << "MontgomeryModularPower speed(s) : " << timeSpan << std::endl;
}

void TestShift()
{
    CBigInt r = 5;
    CBigInt result;

    r <<= 2;
    assert(r == 20);

    r = 0x00000F0F0FF00FF0;
    r <<= 4;
    result.GetFromString("00000F0F0FF00FF00", 16);
    assert(r == result);

    r = 0x00000F0F0FF00FF0;
    CBigInt r1 = r << 4;
    result.GetFromString("00000F0F0FF00FF00", 16);
    assert(r1 == result);

    r = 0x00000F0F0FF00FF0;
    r <<= 36;
    result.GetFromString("00000F0F0FF00FF0000000000", 16);
    assert(r == result);

    r = 0x00000F0F0FF00FF0;
    r1 = r << 36;
    result.GetFromString("00000F0F0FF00FF0000000000", 16);
    assert(r1 == result);

    r = 0x00000F0F0FF00FF0;
    r >>= 4;
    result = 0x000000F0F0FF00FF;
    assert(r == result);

    r = 0x00000F0F0FF00FF0;
    r1 = r >> 4;
    result = 0x000000F0F0FF00FF;
    assert(r1 == result);

    r.GetFromString("00000F0F0FF00FF0000000000", 16);
    r >>= 36;
    result.GetFromString("00000F0F0FF00FF0", 16);
    assert(r == result);

    r.GetFromString("00000F0F0FF00FF0000000000", 16);
    r1 = r >> 36;
    result.GetFromString("00000F0F0FF00FF0", 16);
    assert(r1 == result);
}

void TestRandom()
{
    srand( (unsigned)time( NULL ) );

    int i;
    CBigInt maxv = 1;
    for(i = 0; i< 50; i++)
    {
        CBigInt random = CBigInt::GenRandomInteger(1);
        assert(random <= maxv);
    }
    maxv = 0xFFFFFFFF;
    for(i = 0; i< 50; i++)
    {
        CBigInt random = CBigInt::GenRandomInteger(32);
        assert(random <= maxv);
    }
    maxv = 0x1FFFFFFFFL;
    for(i = 0; i< 50; i++)
    {
        CBigInt random = CBigInt::GenRandomInteger(33);
        assert(random <= maxv);
    }
    maxv = 0xFFFFFFFFFFFFFFL;
    for(i = 0; i< 50; i++)
    {
        CBigInt random = CBigInt::GenRandomInteger(56);
        assert(random <= maxv);
    }
}

void TestCongruence()
{
    CBigInt r = CongruenceEquation(1, 7);
    assert(r == 1);

    r = CongruenceEquation(8, 7);
    assert(r == 1);

    CBigInt t = CongruenceEquation(7, 0x100000000L);

    for(int i = 0; i < COUNT; i += 2)
    {
        CBigInt a, b;
        a.GetFromString(mN[i], 10);
        b.GetFromString(mN[i + 1], 10);
        CBigInt gcd = GcdLcm(a, b);
        gcd -= 1;
        r = CongruenceEquation(a, gcd);
        assert(r == b);
    }

    __int64 rr = CongruenceEquation64(1, 7);
    assert(rr == 1);

    rr = CongruenceEquation64(8, 7);
    assert(rr == 1);
}

void TestPrime()
{
    CBigInt n;
    int i;

    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(mA[i], 10);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(mB[i], 10);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(mN[i], 10);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(kA[i], 16);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(kB[i], 16);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
    for(i = 0; i < COUNT; i++)
    {
        n.GetFromString(kN[i], 16);
        //assert(RabPrimeTest(n) == 1);
        assert(IsPrimeNumber(n));
    }
}

void TestPrimeSpeed1()
{
}

void TestPrimeSpeed2()
{
}

void TestGetPutData()
{
    CBigInt bi;
    unsigned char tmpBuf[256];
    for(int i = 0; i < GETPUT_COUNT; i++)
    {
        bi.GetFromData((const char *)gT[i].data, gT[i].dataSize);
        //int size = bi.PutToData((char *)tmpBuf, 256, false);
        int size = bi.PutToData((char *)tmpBuf, gT[i].dataSize);
        assert(size == gT[i].dataSize);
        assert(memcmp(gT[i].data, tmpBuf, size) == 0);
    }
}

const char *ds = "380366FB7F2280DFD0748E6D605444E4426A0834421D45D7FC5617102F75C3FB4596666648C43271E3796AB33490ACBE5C8577C7A3F975DAF1BDBC0E13A431";
const char *ns = "C936B5F3A01AF10BDC96A1C9C34AE4561736897D5DCFBAB3143C378AE56C3528D341527808AFFBA39C9C84924DB25BAFEDA7EE1874A1E91D488F3B59DFDCA5";

//const char *ds = "2B857FD141687A2984A7C588D79E1D8EDFD3F297345839E447AACE98EEF9914EB32EB589FE2DFA164DFF29F737B46B75B956ACA66CA639763C847601FC5809F9";
//const char *ns = "32F0CCA403EBEF8CB479A09C63853302BB3653CFC02272780D3C90210DDFBD9D563307195D57EE7678DFCFF7AB0C8F6D46C2654DD74FBA7CF922CBC2ED806059";

void TestEncryption()
{
    CBigInt e = 0x10001;
    CBigInt n, d;

#if 0
    CBigInt p = GeneratePrime(256);
    CBigInt q = GeneratePrime(256);
    n = p * q;
    CBigInt Fn = (p - 1) * (q - 1);
    d = CongruenceEquation(e, Fn);
    CBigInt r = (e * d) % Fn;

    std::string s;
    d.PutToString(s, 16);
    std::cout << s << std::endl << std::endl;

    n.PutToString(s, 16);
    std::cout << s << std::endl << std::endl;
#endif

    d.GetFromString(ds, 16);
    n.GetFromString(ns, 16);

    const char *m = "***************ABCD我是明文信息DCBA***************";
    char c[1024], m2[1024];
    int eSize = Rsa_Pkcs15_Encrypt(e, n, 512, (void *)m, strlen(m), c, 1024);
    assert(eSize == 64);
    int dSize = Rsa_Pkcs15_Decrypt(d, n, 512, c, eSize, m2, 1024);
    assert(dSize == strlen(m));
    assert(memcmp(m, m2, strlen(m)) == 0);
}

void testSign()
{
    CBigInt e = 0x10001;
    CBigInt n, d;

    d.GetFromString(ds, 16);
    n.GetFromString(ns, 16);

    const char *m = "***************Please sign me!***************";
    char c[1024];
    int eSize = Rsa_Pkcs15_Sign(d, n, 512, (void *)m, strlen(m), c, 1024);
    assert(eSize == 64);
    bool bRight = Rsa_Pkcs15_Verify(e, n, 512, c, eSize, (void *)m, strlen(m));
    assert(bRight);
}

int main(int argc, char* argv[])
{
    TestBitSet();
    TestShift();
    TestRandom();
    TestCongruence();
    //TestPrime();
    //TestModularPower();
    //TestSpeed3();
    //TestSpeed1();
    //TestSpeed2();
    //TestGetPutData();
    TestEncryption();
    testSign();

    getchar();
/*
    for(int i = 0; i < 50; i++)
    {
        CBigInt r = GetBigIntPrime(512);
        std::string number;
        r.PutToString(number, 16);
        std::cout << number << std::endl;
    }
*/
	return 0;
}











